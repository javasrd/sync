<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"
	default-lazy-init="true">

	<description>Spring公共配置</description>

    <task:scheduled-tasks>   
        <task:scheduled ref="BackupMonitor" method="ExecuteService" cron="0/10 * * * * ?"/>   
    </task:scheduled-tasks> 

	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.zc">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
		<context:exclude-filter type="annotation"
			expression="com.zc.base.orm.mybatis.annotation.MyBatisRepository" />
	</context:component-scan>
	
	<context:component-scan base-package="com.zc.synhis">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
		<context:exclude-filter type="annotation"
			expression="com.zc.base.orm.mybatis.annotation.MyBatisRepository" />
	</context:component-scan>

	<!-- 定义aspectj -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- enable the configuration of transactional behavior based on annotations -->
	<!-- spring 注解事务，不要与声明事务冲突 -->
	<tx:annotation-driven transaction-manager="txManager" />
	
	<!-- spring 声明式事务处理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<!--  捕获异常主事务不回滚，抛出异常主事务回滚 -->
		<property name="globalRollbackOnParticipationFailure" value="false"></property> 
	</bean>
	
	<aop:config>
		<aop:pointcut id="fooServiceMethods"
			expression="execution(* com.zc.dem..service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceMethods" />
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="*_tran_new" propagation="REQUIRES_NEW" isolation="READ_COMMITTED"/>
			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice> 

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis-mapper.xml"></property>
		<property name="mapperLocations" value="classpath*:mybatis/oracle/**/*.xml" />
	</bean>
	
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean id="mapperScannerConfigurer1" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zc.dem" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
		<property name="annotationClass"
			value="com.zc.base.orm.mybatis.annotation.MyBatisRepository" />
	</bean>
	
		<!-- properties 资源文件 -->
		<bean id="propertiesConfig"
			class="org.springframework.beans.factory.config.PropertiesFactoryBean">
			<property name="locations" value="classpath*:/application.properties" />
		</bean>

		<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
		<context:property-placeholder location="classpath*:/application.properties" />  
		<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
			destroy-method="close">
			<!-- Connection Info -->
			<property name="driverClassName" value="${jdbc.driver}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password"
				value="#{T(com.zc.dem.common.util.AES128Util).Decrypt(propertiesConfig['jdbc.password'],propertiesConfig['jdbc.encrypt.key'],propertiesConfig['jdbc.encrypt.encoding'])}" />

			<!-- Connection Pooling Info -->
			<property name="maxActive" value="${jdbc.pool.maxActive}" />
			<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
			<property name="initialSize" value="${jdbc.pool.initialSize}" />
			<property name="defaultAutoCommit" value="false" />
			
			<!-- 检查连接 -->
			<property name="testWhileIdle" value="${jdbc.pool.testWhileIdle}" />
			<property name="testOnBorrow" value="${jdbc.pool.testOnBorrow}" />
			<property name="testOnReturn" value="${jdbc.pool.testOnReturn}" />
			<property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" />
			<property name="validationQuery" value="${jdbc.pool.validationQuery}" />
			<property name="validationInterval" value="${jdbc.pool.validationInterval}" />
			<property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}" />
			<property name="jdbcInterceptors" value="${jdbc.pool.jdbcInterceptors}" />
		</bean>
		<bean id="JdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource" ref="dataSource"/>
		</bean>

	<!-- enable the configuration of transactional behavior based on annotations -->
	<!-- spring 注解事务，不要与声明事务冲突 -->
	<tx:annotation-driven transaction-manager="txManager2" />
	
	<!-- spring 声明式事务处理 -->
	<bean id="txManager2"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource2" />
		<!--  捕获异常主事务不回滚，抛出异常主事务回滚 -->
		<property name="globalRollbackOnParticipationFailure" value="false"></property> 
	</bean>
	
	<aop:config>
		<aop:pointcut id="fooServiceMethods2"
			expression="execution(* com.zc2..service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice2" pointcut-ref="fooServiceMethods2" />
	</aop:config>
	
	<tx:advice id="txAdvice2" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="*_tran_new" propagation="REQUIRES_NEW" isolation="READ_COMMITTED"/>
			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice> 

	<bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceForHis" />
		<property name="configLocation" value="classpath:mybatis/mybatis-mapper.xml"></property>
		<property name="mapperLocations" value="classpath*:mybatis/his/*.xml" />
	</bean>
	
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean id="mapperScannerConfigurer2" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zc.synhis" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2"></property>
		<property name="annotationClass"
			value="com.zc.base.orm.mybatis.annotation.MyBatisRepository" />
	</bean>

		<!-- properties 资源文件 -->
		<bean id="propertiesConfig2"
			class="org.springframework.beans.factory.config.PropertiesFactoryBean">
			<property name="locations" value="classpath*:/application.properties" />
		</bean>

		<!-- 数据源配置, 使用Tomcat JDBC连接池 -->
		<context:property-placeholder location="classpath*:/application.properties" />
		<bean id="dataSourceForHis" class="org.apache.tomcat.jdbc.pool.DataSource"
			destroy-method="close">
			<!-- Connection Info -->
			<property name="driverClassName" value="${synhis.data.driver}" />
			<property name="url" value="${synhis.data.address}" />
			<property name="username" value="${synhis.data.username}" />
			<property name="password" value="${synhis.data.password}" />

			<!-- Connection Pooling Info -->
			<property name="maxActive" value="${jdbc.pool.maxActive}" />
			<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
			<property name="initialSize" value="${jdbc.pool.initialSize}" />
			<property name="defaultAutoCommit" value="false" />

			<!-- 检查连接 -->
			<property name="testWhileIdle" value="${jdbc.pool.testWhileIdle}" />
			<property name="testOnBorrow" value="${jdbc.pool.testOnBorrow}" />
			<property name="testOnReturn" value="${jdbc.pool.testOnReturn}" />
			<property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" />
			<property name="validationQuery" value="${jdbc.pool.validationQuery}" />
			<property name="validationInterval" value="${jdbc.pool.validationInterval}" />
			<property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}" />
			<property name="jdbcInterceptors" value="${jdbc.pool.jdbcInterceptors}" />
		</bean>
		<bean id="JdbcTemplate2" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource" ref="dataSourceForHis"/>
		</bean>
	
	<!-- quartz动态任务处理  禁止并发处理  -->
	<bean id="schedulerFactoryBean"  class="org.springframework.scheduling.quartz.SchedulerFactoryBean" />
	
	<beans>
		<bean id="activeMQ" class="org.apache.activemq.ActiveMQConnectionFactory"> 
	        <property name="brokerURL" value="${activemq.remote.url}"/> 
	        <property name="useAsyncSend" value = "false"/>
	    </bean> 
		
		<!-- activeMQ连接对象 -->
		<bean id="connectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">     	
	    	<property name="connectionFactory" ref="activeMQ" />
	     </bean> 
	    
	    <!-- 发送消息的目的地队列1病人信息 -->
	    <bean id="destPatient" class="org.apache.activemq.command.ActiveMQQueue">
	         <constructor-arg index="0" value="${activemq.queue.patient.name}" />
	    </bean>
	    
	    <!-- 发送消息的目的地队列2药品字典 -->
	    <bean id="destMedicamentDict" class="org.apache.activemq.command.ActiveMQQueue">
	         <constructor-arg index="0" value="${activemq.queue.medicamentDict.name}" />
	    </bean>
	    
	    <!-- 发送消息的目的地队列3病区信息 -->
	    <bean id="destInpatientArea" class="org.apache.activemq.command.ActiveMQQueue">
	         <constructor-arg index="0" value="${activemq.queue.inpatientArea.name}" />
	    </bean>
	    
	    <!-- 发送消息的目的地队列4医嘱 -->
	    <bean id="destDrugway" class="org.apache.activemq.command.ActiveMQQueue">
	         <constructor-arg index="0" value="${activemq.queue.drugway.name}" />
	    </bean>
	    
	    <!-- 发送消息的目的地队列5医嘱频次  -->
	    <bean id="destDrugfrequency" class="org.apache.activemq.command.ActiveMQQueue">
	         <constructor-arg index="0" value="${activemq.queue.drugfrequency.name}" />
	    </bean>
	    
	   <!-- 发送消息的目的地队列6用药途径 -->
	    <bean id="destDrugAdministration" class="org.apache.activemq.command.ActiveMQQueue">
	         <constructor-arg index="0" value="${activemq.queue.drugAdministration.name}" />
	    </bean>
	    
	    <!-- 发送消息的目的地队列7同步activeMQ任务 -->
	    <bean id="destSyncDataScheduleTask" class="org.apache.activemq.command.ActiveMQQueue">
	         <constructor-arg index="0" value="${activemq.queue.syncDataScheduleTask.name}" />
	    </bean>
	    
	    <!-- 发送消息的目的地队列8员工信息 -->
	    <bean id="destEmployeeInfo" class="org.apache.activemq.command.ActiveMQQueue">
	         <constructor-arg index="0" value="${activemq.queue.destEmployeeInfo.name}" />
	    </bean>
	    
	     <!-- 发送消息的目的地队列9药单执行记录 -->
	    <bean id="destYdExcuteRecord" class="org.apache.activemq.command.ActiveMQQueue">
	         <constructor-arg index="0" value="${activemq.queue.destYdExcuteRecord.name}" />
	    </bean>
	     
	     <!-- 消息转换 -->
	     <bean id="messageConverter" class="com.zc.dem.ActiveMQ.MsgConverter"/>
	     
	     <!-- 配置JMS模版 -->
	     <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
	         <property name="connectionFactory" ref="connectionFactory" />
	         <property name="messageConverter" ref="messageConverter" />
	         <!-- 发送模式  DeliveryMode.NON_PERSISTENT=1:非持久 ; DeliveryMode.PERSISTENT=2:持久-->
	    	<property name="deliveryMode" value="2" /> 
	     </bean>
	     
	     <bean id="queueProducer" class="com.zc.dem.ActiveMQ.ActiveMQSender">
	         <!-- property name="destination" ref="destination"/-->
	         <property name="jmsTemplate" ref="jmsTemplate"/>  
	     </bean>
	     
	     <bean id="setPushToMQMessage" class="com.zc.dem.common.util.SetPushToMQMessage"> 
	     </bean>
	     
	     <!-- 消费者消息配置  目前DEM不需要支持消费者功能，暂时注释掉 >
	     <bean id="queueConsumer" class="com.zc.dem.ActiveMQ.ActiveMQReceiver"/> 
     
     	<消费者监听 >
	     <bean id="queueListener" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
	         <constructor-arg ref="queueConsumer"/>
	         <property name="defaultListenerMethod" value="receive"/>
	         <property name="messageConverter" ref="messageConverter"/>
	     </bean>
     
	     <bean id="queueListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	         <property name="connectionFactory" ref="connectionFactory"/>
	         <property name="destination" ref="destDrugway" />
	         <property name="messageListener" ref="queueListener" />
	     </bean-->
     </beans>
</beans>